import java.util.ArrayList;
import java.util.Scanner;

public class AssignmentOne {
    public static void main(String[] args) {
        // Part 3 - Using classes and objects
        GeneralPractitioner gp1 = new GeneralPractitioner(1, "Dr. Pan", "General Practice", "Ginkgo Avenue");
        GeneralPractitioner gp2 = new GeneralPractitioner(2, "Dr. Chen", "General Practice", "Starlight Pedestrian Street");
        GeneralPractitioner gp3 = new GeneralPractitioner(3, "Dr. Zhang", "General Practice", "Good-neighborly Old street");
        EmergencyPhysician ep1 = new EmergencyPhysician(4, "Dr. Lee", "Emergency Physician", "expert");
        EmergencyPhysician ep2 = new EmergencyPhysician(5, "Dr. Wang", "Emergency Physician", "DIRECTOR");

        System.out.println("Doctor information:");
        gp1.printDetails();
        System.out.println("------------------------------");
        gp2.printDetails();
        System.out.println("------------------------------");
        gp3.printDetails();
        System.out.println("------------------------------");
        ep1.printDetails();
        System.out.println("------------------------------");
        ep2.printDetails();
        System.out.println("------------------------------");

        // Part 5 - Collection of appointments
        ArrayList<Appointment> appointments = new ArrayList<>();

        // Add patient Information
        createAppointment(appointments, "Jack", "1234567890", "09:00", gp1);
        createAppointment(appointments, "Make", "0987654321", "10:30", gp2);
        createAppointment(appointments, "Bob", "1112223333", "14:00", ep1);
        createAppointment(appointments, "Alice", "4445556666", "15:30", ep2);

        while (1 < 10){
            System.out.println("Enter 1 to display all reservations and 2 to delete reservations");
            Scanner in = new Scanner(System.in);
            int re = in.nextInt();
            if (re == 1){
                printExistingAppointments(appointments);
            } else if (re == 2) {
                System.out.println("Enter the deleted phone number.");
                String number = String.valueOf(in.nextInt());
                cancelBooking(appointments, number);
                System.out.println("Show all appointments again.");
                printExistingAppointments(appointments);
            }
        }
    }


    // Definition Add patient information
    public static void createAppointment(ArrayList<Appointment> appointments, String patientName, String ContactInformation, String preferredTimeSlot, HealthProfessional doctor) {
        Appointment appointment = new Appointment(patientName, ContactInformation, preferredTimeSlot, doctor);
        appointments.add(appointment);
    }

    // Define print all appointments
    public static void printExistingAppointments(ArrayList<Appointment> appointments) {
        if (appointments.isEmpty()) {
            System.out.println("There are no appointments.");
        } else {
            for (Appointment appointment : appointments) {
                appointment.printDetails();
                System.out.println("------------------------------");
            }
        }
    }

    // Define Cancellation
    public static void cancelBooking(ArrayList<Appointment> appointments, String ContactInformation) {
        for (Appointment appointment : appointments) {
            if (appointment.getContactInformation().equals(ContactInformation)) {
                appointments.remove(appointment);
                System.out.println("Booking cancelled successfully.");
                return;
            }
        }
        System.out.println("This reservation is not available.");
    }
}

public class HealthProfessional {
    private int ID;
    private String name;
    private String Position;

    // Default constructor
    public HealthProfessional() {
    }

    // A constructor with arguments
    public HealthProfessional(int ID, String name, String Position) {
        this.ID = ID;
        this.name = name;
        this.Position = Position;
    }

    // A method to print all instance variables
    public void printDetails() {
        System.out.println("ID: " + ID);
        System.out.println("Name: " + name);
        System.out.println("Position: " + Position);
    }
}

public class GeneralPractitioner extends HealthProfessional {
    private String WorkPlace;

    // Default constructor
    public GeneralPractitioner() {
    }

    // A constructor with arguments
    public GeneralPractitioner(int ID, String name, String Position, String WorkPlace) {
        super(ID, name, Position);
        this.WorkPlace = WorkPlace;
    }

    // A method to print all instance variables
    @Override
    public void printDetails() {
        System.out.println("The health professional details are:");
        super.printDetails();
        System.out.println("Type: General Practitioner");
        System.out.println("Work Place: " + WorkPlace);
    }
}

public class EmergencyPhysician extends HealthProfessional {
    private String ProfessionalTitle;

    // Default constructor
    public EmergencyPhysician() {
    }

    // A constructor with arguments
    public EmergencyPhysician(int ID, String name, String Position, String ProfessionalTitle) {
        super(ID, name, Position);
        this.ProfessionalTitle = ProfessionalTitle;
    }

    // A method to print all instance variables
    @Override
    public void printDetails() {
        System.out.println("The health professional details are:");
        super.printDetails();
        System.out.println("Type: Specialist");
        System.out.println("Professional Title: " + ProfessionalTitle);
    }
}

public class Appointment {
    private String patientName;
    private String ContactInformation;
    private String preferredTimeSlot;
    private HealthProfessional doctor;

    // Default constructor
    public Appointment() {
    }

    // A constructor with arguments
    public Appointment(String patientName, String ContactInformation, String preferredTimeSlot, HealthProfessional doctor) {
        this.patientName = patientName;
        this.ContactInformation = ContactInformation;
        this.preferredTimeSlot = preferredTimeSlot;
        this.doctor = doctor;
    }

    // A method to print all instance variables
    public void printDetails() {
        System.out.println("Patient Name: " + patientName);
        System.out.println("Contact information: " + ContactInformation);
        System.out.println("Preferred Time Slot: " + preferredTimeSlot);
        System.out.println("Doctor Details:");
        doctor.printDetails();
    }

    public String getContactInformation() {
        return ContactInformation;
    }

}

